// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vvv9912/ya-go-musthave-metrics-tpl.git/internal/model"
)

// MockNotifierSend is a repository_mock of NotifierSend interface.
type MockNotifierSend struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierSendMockRecorder
}

// MockNotifierSendMockRecorder is the repository_mock recorder for MockNotifierSend.
type MockNotifierSendMockRecorder struct {
	mock *MockNotifierSend
}

// NewMockNotifierSend creates a new repository_mock instance.
func NewMockNotifierSend(ctrl *gomock.Controller) *MockNotifierSend {
	mock := &MockNotifierSend{ctrl: ctrl}
	mock.recorder = &MockNotifierSendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierSend) EXPECT() *MockNotifierSendMockRecorder {
	return m.recorder
}

// NotifierPending mocks base method.
func (m *MockNotifierSend) NotifierPending(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifierPending", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifierPending indicates an expected call of NotifierPending.
func (mr *MockNotifierSendMockRecorder) NotifierPending(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifierPending", reflect.TypeOf((*MockNotifierSend)(nil).NotifierPending), ctx)
}

// MockMetrics is a repository_mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the repository_mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new repository_mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockMetrics) GetCounter(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricsMockRecorder) GetCounter(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetrics)(nil).GetCounter), ctx, key)
}

// GetGauge mocks base method.
func (m *MockMetrics) GetGauge(ctx context.Context, key string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricsMockRecorder) GetGauge(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetrics)(nil).GetGauge), ctx, key)
}

// GetMetrics mocks base method.
func (m *MockMetrics) GetMetrics(ctx context.Context, metrics model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, metrics)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsMockRecorder) GetMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetrics)(nil).GetMetrics), ctx, metrics)
}

// PutCounter mocks base method.
func (m *MockMetrics) PutCounter(ctx context.Context, key string, val int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCounter", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCounter indicates an expected call of PutCounter.
func (mr *MockMetricsMockRecorder) PutCounter(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCounter", reflect.TypeOf((*MockMetrics)(nil).PutCounter), ctx, key, val)
}

// PutGauge mocks base method.
func (m *MockMetrics) PutGauge(ctx context.Context, key string, val float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGauge", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutGauge indicates an expected call of PutGauge.
func (mr *MockMetricsMockRecorder) PutGauge(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGauge", reflect.TypeOf((*MockMetrics)(nil).PutGauge), ctx, key, val)
}

// PutMetrics mocks base method.
func (m *MockMetrics) PutMetrics(ctx context.Context, metrics model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetrics indicates an expected call of PutMetrics.
func (mr *MockMetricsMockRecorder) PutMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetrics", reflect.TypeOf((*MockMetrics)(nil).PutMetrics), ctx, metrics)
}

// SendMetricstoFile mocks base method.
func (m *MockMetrics) SendMetricstoFile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricstoFile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricstoFile indicates an expected call of SendMetricstoFile.
func (mr *MockMetricsMockRecorder) SendMetricstoFile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricstoFile", reflect.TypeOf((*MockMetrics)(nil).SendMetricstoFile), ctx)
}
