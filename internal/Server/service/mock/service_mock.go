// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_mock is a generated GoMock package.
package service_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/vvv9912/ya-go-musthave-metrics-tpl.git/internal/model"
)

// MockGaugeStorager is a mock of GaugeStorager interface.
type MockGaugeStorager struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeStoragerMockRecorder
}

// MockGaugeStoragerMockRecorder is the mock recorder for MockGaugeStorager.
type MockGaugeStoragerMockRecorder struct {
	mock *MockGaugeStorager
}

// NewMockGaugeStorager creates a new mock instance.
func NewMockGaugeStorager(ctrl *gomock.Controller) *MockGaugeStorager {
	mock := &MockGaugeStorager{ctrl: ctrl}
	mock.recorder = &MockGaugeStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeStorager) EXPECT() *MockGaugeStoragerMockRecorder {
	return m.recorder
}

// GetAllGauge mocks base method.
func (m *MockGaugeStorager) GetAllGauge() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauge")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauge indicates an expected call of GetAllGauge.
func (mr *MockGaugeStoragerMockRecorder) GetAllGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauge", reflect.TypeOf((*MockGaugeStorager)(nil).GetAllGauge))
}

// GetGauge mocks base method.
func (m *MockGaugeStorager) GetGauge(key string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeStoragerMockRecorder) GetGauge(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeStorager)(nil).GetGauge), key)
}

// UpdateGauge mocks base method.
func (m *MockGaugeStorager) UpdateGauge(key string, val float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeStoragerMockRecorder) UpdateGauge(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeStorager)(nil).UpdateGauge), key, val)
}

// MockCounterStorager is a mock of CounterStorager interface.
type MockCounterStorager struct {
	ctrl     *gomock.Controller
	recorder *MockCounterStoragerMockRecorder
}

// MockCounterStoragerMockRecorder is the mock recorder for MockCounterStorager.
type MockCounterStoragerMockRecorder struct {
	mock *MockCounterStorager
}

// NewMockCounterStorager creates a new mock instance.
func NewMockCounterStorager(ctrl *gomock.Controller) *MockCounterStorager {
	mock := &MockCounterStorager{ctrl: ctrl}
	mock.recorder = &MockCounterStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterStorager) EXPECT() *MockCounterStoragerMockRecorder {
	return m.recorder
}

// GetAllCounter mocks base method.
func (m *MockCounterStorager) GetAllCounter() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounter")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// GetAllCounter indicates an expected call of GetAllCounter.
func (mr *MockCounterStoragerMockRecorder) GetAllCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounter", reflect.TypeOf((*MockCounterStorager)(nil).GetAllCounter))
}

// GetCounter mocks base method.
func (m *MockCounterStorager) GetCounter(key string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", key)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterStoragerMockRecorder) GetCounter(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterStorager)(nil).GetCounter), key)
}

// UpdateCounter mocks base method.
func (m *MockCounterStorager) UpdateCounter(key string, val uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterStoragerMockRecorder) UpdateCounter(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterStorager)(nil).UpdateCounter), key, val)
}

// MockNotifierSend is a mock of NotifierSend interface.
type MockNotifierSend struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierSendMockRecorder
}

// MockNotifierSendMockRecorder is the mock recorder for MockNotifierSend.
type MockNotifierSendMockRecorder struct {
	mock *MockNotifierSend
}

// NewMockNotifierSend creates a new mock instance.
func NewMockNotifierSend(ctrl *gomock.Controller) *MockNotifierSend {
	mock := &MockNotifierSend{ctrl: ctrl}
	mock.recorder = &MockNotifierSendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierSend) EXPECT() *MockNotifierSendMockRecorder {
	return m.recorder
}

// NotifierPending mocks base method.
func (m *MockNotifierSend) NotifierPending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifierPending")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifierPending indicates an expected call of NotifierPending.
func (mr *MockNotifierSendMockRecorder) NotifierPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifierPending", reflect.TypeOf((*MockNotifierSend)(nil).NotifierPending))
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockMetrics) GetCounter(key string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", key)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricsMockRecorder) GetCounter(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetrics)(nil).GetCounter), key)
}

// GetGauge mocks base method.
func (m *MockMetrics) GetGauge(key string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricsMockRecorder) GetGauge(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetrics)(nil).GetGauge), key)
}

// GetMetrics mocks base method.
func (m *MockMetrics) GetMetrics(metrics model.Metrics) (model.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", metrics)
	ret0, _ := ret[0].(model.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsMockRecorder) GetMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetrics)(nil).GetMetrics), metrics)
}

// PutCounter mocks base method.
func (m *MockMetrics) PutCounter(key string, val uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCounter", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCounter indicates an expected call of PutCounter.
func (mr *MockMetricsMockRecorder) PutCounter(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCounter", reflect.TypeOf((*MockMetrics)(nil).PutCounter), key, val)
}

// PutGauge mocks base method.
func (m *MockMetrics) PutGauge(key string, val float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGauge", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutGauge indicates an expected call of PutGauge.
func (mr *MockMetricsMockRecorder) PutGauge(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGauge", reflect.TypeOf((*MockMetrics)(nil).PutGauge), key, val)
}

// PutMetrics mocks base method.
func (m *MockMetrics) PutMetrics(metrics model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetrics indicates an expected call of PutMetrics.
func (mr *MockMetricsMockRecorder) PutMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetrics", reflect.TypeOf((*MockMetrics)(nil).PutMetrics), metrics)
}

// SendMetricstoFile mocks base method.
func (m *MockMetrics) SendMetricstoFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricstoFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricstoFile indicates an expected call of SendMetricstoFile.
func (mr *MockMetricsMockRecorder) SendMetricstoFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricstoFile", reflect.TypeOf((*MockMetrics)(nil).SendMetricstoFile))
}
