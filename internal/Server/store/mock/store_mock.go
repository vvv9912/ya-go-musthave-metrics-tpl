// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGaugeStorager is a mock of GaugeStorager interface.
type MockGaugeStorager struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeStoragerMockRecorder
}

// MockGaugeStoragerMockRecorder is the mock recorder for MockGaugeStorager.
type MockGaugeStoragerMockRecorder struct {
	mock *MockGaugeStorager
}

// NewMockGaugeStorager creates a new mock instance.
func NewMockGaugeStorager(ctrl *gomock.Controller) *MockGaugeStorager {
	mock := &MockGaugeStorager{ctrl: ctrl}
	mock.recorder = &MockGaugeStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeStorager) EXPECT() *MockGaugeStoragerMockRecorder {
	return m.recorder
}

// GetAllGauge mocks base method.
func (m *MockGaugeStorager) GetAllGauge(ctx context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauge", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGauge indicates an expected call of GetAllGauge.
func (mr *MockGaugeStoragerMockRecorder) GetAllGauge(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauge", reflect.TypeOf((*MockGaugeStorager)(nil).GetAllGauge), ctx)
}

// GetGauge mocks base method.
func (m *MockGaugeStorager) GetGauge(ctx context.Context, key string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeStoragerMockRecorder) GetGauge(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeStorager)(nil).GetGauge), ctx, key)
}

// UpdateGauge mocks base method.
func (m *MockGaugeStorager) UpdateGauge(ctx context.Context, key string, val float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeStoragerMockRecorder) UpdateGauge(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeStorager)(nil).UpdateGauge), ctx, key, val)
}

// MockCounterStorager is a mock of CounterStorager interface.
type MockCounterStorager struct {
	ctrl     *gomock.Controller
	recorder *MockCounterStoragerMockRecorder
}

// MockCounterStoragerMockRecorder is the mock recorder for MockCounterStorager.
type MockCounterStoragerMockRecorder struct {
	mock *MockCounterStorager
}

// NewMockCounterStorager creates a new mock instance.
func NewMockCounterStorager(ctrl *gomock.Controller) *MockCounterStorager {
	mock := &MockCounterStorager{ctrl: ctrl}
	mock.recorder = &MockCounterStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterStorager) EXPECT() *MockCounterStoragerMockRecorder {
	return m.recorder
}

// GetAllCounter mocks base method.
func (m *MockCounterStorager) GetAllCounter(ctx context.Context) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounter", ctx)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounter indicates an expected call of GetAllCounter.
func (mr *MockCounterStoragerMockRecorder) GetAllCounter(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounter", reflect.TypeOf((*MockCounterStorager)(nil).GetAllCounter), ctx)
}

// GetCounter mocks base method.
func (m *MockCounterStorager) GetCounter(ctx context.Context, key string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, key)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterStoragerMockRecorder) GetCounter(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterStorager)(nil).GetCounter), ctx, key)
}

// UpdateCounter mocks base method.
func (m *MockCounterStorager) UpdateCounter(ctx context.Context, key string, val uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterStoragerMockRecorder) UpdateCounter(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterStorager)(nil).UpdateCounter), ctx, key, val)
}
